"""
Django settings for an appointment_booking_system project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import logging
import os
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-!pj)*3w!x!mhv7!*j%-t&o1w27@hrv&r#no*o-w5%q+w+cun0u"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_yasg",
    "appointment_booking_system_app",
    "django_celery_beat",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # custom middleware
    "middleware.log_requests.RequestLoggingMiddleware",
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
]

ROOT_URLCONF = "appointment_booking_system.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "appointment_booking_system.wsgi.application"


DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE"),
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    },
}


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


STATIC_URL = "/static/"
MEDIA_URL = "/media/"

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"


CALLBACK_FILTER = "django.utils.log.CallbackFilter"
FILE_HANDLER = "logging.FileHandler"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{levelname}] {asctime} {name} ({lineno}): {message}",
            "style": "{",
        },
        "colored": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(log_color)s[%(levelname)s] %(asctime)s %(name)s: %(message)s",
        },
    },
    "filters": {
        "require_debug": {
            "()": CALLBACK_FILTER,
            "callback": lambda record: record.levelno == logging.DEBUG,
        },
        "require_info": {
            "()": CALLBACK_FILTER,
            "callback": lambda record: record.levelno == logging.INFO,
        },
        "require_warning": {
            "()": CALLBACK_FILTER,
            "callback": lambda record: record.levelno == logging.WARNING,
        },
        "require_error": {
            "()": CALLBACK_FILTER,
            "callback": lambda record: record.levelno == logging.ERROR,
        },
        "exc_info_to_file": {"()": "middleware.log_exceptions.ExcInfoToFileFilter"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "colored",
        },
        "debug_file": {
            "class": FILE_HANDLER,
            "filename": os.path.join(BASE_DIR, "logs/debug.log"),
            "formatter": "verbose",
            "filters": ["require_debug"],
        },
        "info_file": {
            "class": FILE_HANDLER,
            "filename": os.path.join(BASE_DIR, "logs/info.log"),
            "formatter": "verbose",
            "filters": ["require_info"],
        },
        "warning_file": {
            "class": FILE_HANDLER,
            "filename": os.path.join(BASE_DIR, "logs/warning.log"),
            "formatter": "verbose",
            "filters": ["require_warning"],
        },
        "error_file": {
            "class": FILE_HANDLER,
            "filename": os.path.join(BASE_DIR, "logs/error.log"),
            "formatter": "verbose",
            "filters": ["require_error", "exc_info_to_file"],
        },
    },
    "loggers": {
        "": {
            "handlers": [
                "console",
                "debug_file",
                "info_file",
                "warning_file",
                "error_file",
            ],
            "level": "DEBUG",
            "propagate": False,
        },
        "django": {
            "handlers": [
                "console",
                "debug_file",
                "info_file",
                "warning_file",
                "error_file",
            ],
            "level": "INFO",
            "propagate": False,
        },
        "recruiting_app": {
            "handlers": [
                "console",
                "debug_file",
                "info_file",
                "warning_file",
                "error_file",
            ],
            "level": "DEBUG",
            "propagate": False,
        },
        "request_logger": {
            "handlers": [
                "console",
                "debug_file",
                "info_file",
                "warning_file",
                "error_file",
            ],
            "level": "INFO",
            "propagate": False,
        },
    },
}
